"""
<<<<<<< HEAD
Implementation for doppel-test.
"""
import click
=======
Implementation for ``doppel-test``
"""

>>>>>>> main
import os

from sys import stdout

import click

from doppel.reporters import SimpleReporter
from doppel.PackageAPI import PackageAPI


@click.command()
@click.option("--files", "-f", default=None, help="Comma-delimited list of doppel output files.")
@click.option(
    "--errors-allowed",
    default=0,
    help="Integer number of errors to allow before returning non-zero exit code. Default is 0.",
)
@click.option(
<<<<<<< HEAD
    '--ignore-classes',
    default=False,
    help="If given, classes will be ignored when comparing packages.",
    is_flag=True
)
@click.option(
    '--ignore-functions',
    default=False,
    help="If given, functions will be ignored when comparing packages.",
    is_flag=True
)
@click.option(
    '--version',
    default=False,
    help="Get the current version of doppel-test",
    is_flag=True
=======
    "--version", default=False, help="Get the current version of doppel-test", is_flag=True
>>>>>>> main
)
def main(files: str, errors_allowed: int, ignore_classes: bool, ignore_functions: bool, version: bool) -> None:
    """
    doppel is a a continuous integration tool for testing
    the continuity of APIs for libraries implemented in
    different languages.

    :param files: A string with a comma-delimited list of
        file paths to JSON files generated by
        ``doppel-describe``.
    :param errors_allowed: Number of errors that are
        permissible before throwing a non-zero exit
        code. Set this to a higher value to make doppel-cli
        more permissive.
    :param ignore_classes: If given, classes will be ignored when
        comparing packages.
    ;param ignore_functions: If given, functions will be ignored
        when comparing packages.
    :param version: Get the current version of doppel-test.
    """
    if version is True:
        version_file = os.path.join(os.path.dirname(__file__), "VERSION")
        with open(version_file, "r") as f:
            out = f.read()
        stdout.write(out)
        return

    if files is None:
        raise RuntimeError('Missing option "--files"')

    print("Loading comparison files")

    f_list = files.split(",")

    # Check if these are legit package objects
    pkgs = [
        PackageAPI.from_json(
            filename=f,
            ignore_classes=ignore_classes,
            ignore_functions=ignore_functions
        )
        for f in f_list
    ]

    # Report
    reporter = SimpleReporter(pkgs, errors_allowed)
    reporter.compare()


if __name__ == "__main__":
    main()
